import { patternKeyCompare } from 'pattern-key-compare';
/**
 * Resolve an import specifier based on the `imports` field in `package.json`.
 *
 * @param pjson contents of package.json
 * @param specifier import specifier
 * @return resolved specifier or undefined if not found
 * @see https://nodejs.org/api/packages.html#subpath-imports
 */
export function resolve(pjson, specifier, options) {
    if (!pjson.imports)
        return undefined;
    if (!specifier.startsWith('#'))
        return undefined;
    if (specifier === '#' || specifier === '#/')
        return undefined;
    const matched = pjson.imports[specifier];
    if (matched) {
        return noRecursive(lookupReplacer(matched, options?.conditions));
    }
    const expansionKeys = getExpensionKeys(Object.keys(pjson.imports));
    for (const key of expansionKeys) {
        const keyParts = key.split('*');
        const [prefix, suffix] = keyParts;
        if (specifier.startsWith(prefix)) {
            const replacer = lookupReplacer(pjson.imports[key], options?.conditions);
            if (replacer)
                return noRecursive(Array.isArray(replacer) ? replacer.map(replacePattern) : replacePattern(replacer));
        }
        function replacePattern(replacer) {
            const toKeep = suffix ? specifier.slice(prefix.length, -suffix.length) : specifier.slice(prefix.length);
            return replacer.replace(/\*/g, toKeep);
        }
    }
    return undefined;
}
function lookupReplacer(map, conditions) {
    if (typeof map === 'string' || Array.isArray(map))
        return map;
    if (conditions) {
        for (const condition of conditions) {
            if (map[condition])
                return lookupReplacer(map[condition], conditions);
        }
    }
    return map.default;
}
function noRecursive(value) {
    if (Array.isArray(value))
        return value.map(noRecursive);
    return value?.startsWith('#') ? undefined : value;
}
function getExpensionKeys(keys) {
    return keys.filter(k => k.indexOf('*') >= 0).sort(patternKeyCompare);
}
